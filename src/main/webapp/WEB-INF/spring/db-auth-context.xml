<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx https://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- 
		StandardPBE... 클래스가  
		암호문을 복호화할 때 사용할 Salt 키를 제공해줄 보조 클래스
		
		서버, 컴퓨터에 설정된 환경변수 값을 읽어서 Salt로 사용할 수 있도록
		만들어주는 클래스
		
		Environment... 클래스가 제공하는 Salt와, 알고리즘 설정을 사용하여
		복호화를 한다.
		
		PBEWithMD5AndDES를 이용하여 알고리즘
		
		Salt 문자열을 아무나 볼 수 있는 평문으로 설정한 방법
		<property name="password" value="BIZ.COM"/>
		위와 완전히 다른 방법.
		Salt 문자열을 컴퓨터(서버)의 환경변수에서 가져와서 사용하라
		컴퓨터에 환경변수 BIZ.COM이 있으면 이를 불러와서 사용하기 때문에
		열어보기가 굉장히 힘듦
		<property name="passwordEnvName" value="BIZ.COM"/>
	-->
	<bean id="envConfig" class="org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig">
		<property name="algorithm" value="PBEWithMD5AndDES"/>
		<property name="passwordEnvName" value="BIZ.COM"/>
	</bean>


	<!-- 
	아래에 있는 EncryptableProperty~ 클래스가 db.connection.properties 파일의 암호화된 문자열을
	읽어서 복호화 한후 일반 문자열로 변환하여 property로 사용할 수 있도록
	도와주는 보조 클래스
	-->
	<bean id="encConvert" class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
		<property name="config" ref="envConfig"/>
	</bean>

	<!-- 
	db.connection.properties로부터 username과 password를 가져와서
	사용하기 위한 준비
	
	Encypt... 클래스는 StandardPBE... 클래스를 사용하여
	db.connection.properties 파일에 저장된 암호화된 문자열을 평문 문자열로
	복호화 한다.
	-->
	<!-- 암호화된걸 가져와서 쓸 수 있게 도와주는 EncryptableProperty~ -->
	<bean class="org.jasypt.spring31.properties.EncryptablePropertyPlaceholderConfigurer">
		<constructor-arg ref="encConvert"/>
		<property name="fileEncoding" value="UTF-8"/>
		<property name="locations">
			<list>
				<value>/WEB-INF/spring/properties/db.connection.properties</value>
				<value>/WEB-INF/spring/properties/naver.connection.properties</value>
				<value>/WEB-INF/spring/properties/gmail.connection.properties</value>
			</list>
		</property>
	
	</bean>
	
	<!-- security 인증과 관련된 user DB 설정부분 -->
	<!-- dataSource -->
	<!-- driverClassName, url, username, password
	
		&amp;useSSL=false : mySQL5.7 에서 issue가 되었던 부분(5.7이하에서는 꼭 넣어줘야 오류가 발생하지 않음)
		보안 연결을 설정하지 않으면 MySQL서버에 접근하지 못하던 문제를 해결방법
		8.x에서는 사용하지 말아야 하는 옵션
		
		만약 사용을 하려면 다음 항목도 같이 추가해야한다.
		
		&allowPublicKeyRetrieval=true;
		
		드라이버에 추가할때는 다음과 같이 추가해주면 된다.
		?serverTimezone=Asia/Seoul&amp;useSSL=false&amp;allowPublicKeyRetrieval=true;
		(8.x 에서는 serverTimezone 옵션은 꼭 추가해줘야함)
	 -->
	<bean id="authDB" class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://localhost:3306/secur?serverTimezone=Asia/Seoul"/>
		<property name="username" value="${mysql.username}"/>
		<property name="password" value="${mysql.password}"/>
	</bean>
	
	<!-- 
	servlet-context에도 있지만
	rootContext에서 사용하기 위해선 하나 더 설정해주어야 한다. 
	-->
	<context:annotation-config/>
	
	<!-- 트랜잭션 관리자 활성화 -->
	<tx:annotation-driven/>
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="authDB"/>
	</bean>
</beans>
